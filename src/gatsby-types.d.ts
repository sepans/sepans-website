/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type ActivitiesCsv = Node & {
  readonly Activity_Count: Maybe<Scalars['String']>;
  readonly Activity_Date: Maybe<Scalars['String']>;
  readonly Activity_Description: Maybe<Scalars['String']>;
  readonly Activity_Gear: Maybe<Scalars['String']>;
  readonly Activity_ID: Maybe<Scalars['String']>;
  readonly Activity_Name: Maybe<Scalars['String']>;
  readonly Activity_Private_Note: Maybe<Scalars['String']>;
  readonly Activity_Type: Maybe<Scalars['String']>;
  readonly Apparent_Temperature: Maybe<Scalars['String']>;
  readonly Athlete_Weight: Maybe<Scalars['String']>;
  readonly Average_Cadence: Maybe<Scalars['String']>;
  readonly Average_Elapsed_Speed: Maybe<Scalars['String']>;
  readonly Average_Flow: Maybe<Scalars['String']>;
  readonly Average_Grade: Maybe<Scalars['String']>;
  readonly Average_Heart_Rate: Maybe<Scalars['String']>;
  readonly Average_Negative_Grade: Maybe<Scalars['String']>;
  readonly Average_Positive_Grade: Maybe<Scalars['String']>;
  readonly Average_Speed: Maybe<Scalars['String']>;
  readonly Average_Temperature: Maybe<Scalars['String']>;
  readonly Average_Watts: Maybe<Scalars['String']>;
  readonly Bike: Maybe<Scalars['String']>;
  readonly Bike_Weight: Maybe<Scalars['String']>;
  readonly Calories: Maybe<Scalars['String']>;
  readonly Cloud_Cover: Maybe<Scalars['String']>;
  readonly Commute: Maybe<Scalars['String']>;
  readonly Dewpoint: Maybe<Scalars['String']>;
  readonly Dirt_Distance: Maybe<Scalars['String']>;
  readonly Distance: Maybe<Scalars['String']>;
  readonly Downhill_Time: Maybe<Scalars['String']>;
  readonly Elapsed_Time: Maybe<Scalars['String']>;
  readonly Elevation_Gain: Maybe<Scalars['String']>;
  readonly Elevation_High: Maybe<Scalars['String']>;
  readonly Elevation_Loss: Maybe<Scalars['String']>;
  readonly Elevation_Low: Maybe<Scalars['String']>;
  readonly Filename: Maybe<Scalars['String']>;
  readonly Flagged: Maybe<Scalars['String']>;
  readonly From_Upload: Maybe<Scalars['String']>;
  readonly Gear: Maybe<Scalars['String']>;
  readonly Grade_Adjusted_Distance: Maybe<Scalars['String']>;
  readonly Humidity: Maybe<Scalars['String']>;
  readonly Jump_Count: Maybe<Scalars['String']>;
  readonly Max_Cadence: Maybe<Scalars['String']>;
  readonly Max_Grade: Maybe<Scalars['String']>;
  readonly Max_Heart_Rate: Maybe<Scalars['String']>;
  readonly Max_Speed: Maybe<Scalars['String']>;
  readonly Max_Temperature: Maybe<Scalars['String']>;
  readonly Max_Watts: Maybe<Scalars['String']>;
  readonly Media: Maybe<Scalars['String']>;
  readonly Moon_Phase: Maybe<Scalars['String']>;
  readonly Moving_Time: Maybe<Scalars['String']>;
  readonly Newly_Explored_Dirt_Distance: Maybe<Scalars['String']>;
  readonly Newly_Explored_Distance: Maybe<Scalars['String']>;
  readonly Number_of_Runs: Maybe<Scalars['String']>;
  readonly Other_Time: Maybe<Scalars['String']>;
  readonly Perceived_Exertion: Maybe<Scalars['String']>;
  readonly Perceived_Relative_Effort: Maybe<Scalars['String']>;
  readonly Power_Count: Maybe<Scalars['String']>;
  readonly Precipitation_Intensity: Maybe<Scalars['String']>;
  readonly Precipitation_Probability: Maybe<Scalars['String']>;
  readonly Precipitation_Type: Maybe<Scalars['String']>;
  readonly Prefer_Perceived_Exertion: Maybe<Scalars['String']>;
  readonly Relative_Effort: Maybe<Scalars['String']>;
  readonly Start_Time: Maybe<Scalars['String']>;
  readonly Sunrise_Time: Maybe<Scalars['String']>;
  readonly Sunset_Time: Maybe<Scalars['String']>;
  readonly Total_Grit: Maybe<Scalars['String']>;
  readonly Total_Steps: Maybe<Scalars['String']>;
  readonly Total_Weight_Lifted: Maybe<Scalars['String']>;
  readonly Total_Work: Maybe<Scalars['String']>;
  readonly Type: Maybe<Scalars['String']>;
  readonly UV_Index: Maybe<Scalars['String']>;
  readonly Uphill_Time: Maybe<Scalars['String']>;
  readonly Weather_Condition: Maybe<Scalars['String']>;
  readonly Weather_Observation_Time: Maybe<Scalars['String']>;
  readonly Weather_Ozone: Maybe<Scalars['String']>;
  readonly Weather_Pressure: Maybe<Scalars['String']>;
  readonly Weather_Temperature: Maybe<Scalars['String']>;
  readonly Weather_Visibility: Maybe<Scalars['String']>;
  readonly Weighted_Average_Power: Maybe<Scalars['String']>;
  readonly Wind_Bearing: Maybe<Scalars['String']>;
  readonly Wind_Gust: Maybe<Scalars['String']>;
  readonly Wind_Speed: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type ActivitiesCsvConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ActivitiesCsvEdge>;
  readonly group: ReadonlyArray<ActivitiesCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ActivitiesCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ActivitiesCsvConnection_distinctArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvConnection_groupArgs = {
  field: ActivitiesCsvFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ActivitiesCsvConnection_maxArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvConnection_minArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvConnection_sumArgs = {
  field: ActivitiesCsvFieldSelector;
};

type ActivitiesCsvEdge = {
  readonly next: Maybe<ActivitiesCsv>;
  readonly node: ActivitiesCsv;
  readonly previous: Maybe<ActivitiesCsv>;
};

type ActivitiesCsvFieldSelector = {
  readonly Activity_Count: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Date: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Description: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Gear: InputMaybe<FieldSelectorEnum>;
  readonly Activity_ID: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Name: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Private_Note: InputMaybe<FieldSelectorEnum>;
  readonly Activity_Type: InputMaybe<FieldSelectorEnum>;
  readonly Apparent_Temperature: InputMaybe<FieldSelectorEnum>;
  readonly Athlete_Weight: InputMaybe<FieldSelectorEnum>;
  readonly Average_Cadence: InputMaybe<FieldSelectorEnum>;
  readonly Average_Elapsed_Speed: InputMaybe<FieldSelectorEnum>;
  readonly Average_Flow: InputMaybe<FieldSelectorEnum>;
  readonly Average_Grade: InputMaybe<FieldSelectorEnum>;
  readonly Average_Heart_Rate: InputMaybe<FieldSelectorEnum>;
  readonly Average_Negative_Grade: InputMaybe<FieldSelectorEnum>;
  readonly Average_Positive_Grade: InputMaybe<FieldSelectorEnum>;
  readonly Average_Speed: InputMaybe<FieldSelectorEnum>;
  readonly Average_Temperature: InputMaybe<FieldSelectorEnum>;
  readonly Average_Watts: InputMaybe<FieldSelectorEnum>;
  readonly Bike: InputMaybe<FieldSelectorEnum>;
  readonly Bike_Weight: InputMaybe<FieldSelectorEnum>;
  readonly Calories: InputMaybe<FieldSelectorEnum>;
  readonly Cloud_Cover: InputMaybe<FieldSelectorEnum>;
  readonly Commute: InputMaybe<FieldSelectorEnum>;
  readonly Dewpoint: InputMaybe<FieldSelectorEnum>;
  readonly Dirt_Distance: InputMaybe<FieldSelectorEnum>;
  readonly Distance: InputMaybe<FieldSelectorEnum>;
  readonly Downhill_Time: InputMaybe<FieldSelectorEnum>;
  readonly Elapsed_Time: InputMaybe<FieldSelectorEnum>;
  readonly Elevation_Gain: InputMaybe<FieldSelectorEnum>;
  readonly Elevation_High: InputMaybe<FieldSelectorEnum>;
  readonly Elevation_Loss: InputMaybe<FieldSelectorEnum>;
  readonly Elevation_Low: InputMaybe<FieldSelectorEnum>;
  readonly Filename: InputMaybe<FieldSelectorEnum>;
  readonly Flagged: InputMaybe<FieldSelectorEnum>;
  readonly From_Upload: InputMaybe<FieldSelectorEnum>;
  readonly Gear: InputMaybe<FieldSelectorEnum>;
  readonly Grade_Adjusted_Distance: InputMaybe<FieldSelectorEnum>;
  readonly Humidity: InputMaybe<FieldSelectorEnum>;
  readonly Jump_Count: InputMaybe<FieldSelectorEnum>;
  readonly Max_Cadence: InputMaybe<FieldSelectorEnum>;
  readonly Max_Grade: InputMaybe<FieldSelectorEnum>;
  readonly Max_Heart_Rate: InputMaybe<FieldSelectorEnum>;
  readonly Max_Speed: InputMaybe<FieldSelectorEnum>;
  readonly Max_Temperature: InputMaybe<FieldSelectorEnum>;
  readonly Max_Watts: InputMaybe<FieldSelectorEnum>;
  readonly Media: InputMaybe<FieldSelectorEnum>;
  readonly Moon_Phase: InputMaybe<FieldSelectorEnum>;
  readonly Moving_Time: InputMaybe<FieldSelectorEnum>;
  readonly Newly_Explored_Dirt_Distance: InputMaybe<FieldSelectorEnum>;
  readonly Newly_Explored_Distance: InputMaybe<FieldSelectorEnum>;
  readonly Number_of_Runs: InputMaybe<FieldSelectorEnum>;
  readonly Other_Time: InputMaybe<FieldSelectorEnum>;
  readonly Perceived_Exertion: InputMaybe<FieldSelectorEnum>;
  readonly Perceived_Relative_Effort: InputMaybe<FieldSelectorEnum>;
  readonly Power_Count: InputMaybe<FieldSelectorEnum>;
  readonly Precipitation_Intensity: InputMaybe<FieldSelectorEnum>;
  readonly Precipitation_Probability: InputMaybe<FieldSelectorEnum>;
  readonly Precipitation_Type: InputMaybe<FieldSelectorEnum>;
  readonly Prefer_Perceived_Exertion: InputMaybe<FieldSelectorEnum>;
  readonly Relative_Effort: InputMaybe<FieldSelectorEnum>;
  readonly Start_Time: InputMaybe<FieldSelectorEnum>;
  readonly Sunrise_Time: InputMaybe<FieldSelectorEnum>;
  readonly Sunset_Time: InputMaybe<FieldSelectorEnum>;
  readonly Total_Grit: InputMaybe<FieldSelectorEnum>;
  readonly Total_Steps: InputMaybe<FieldSelectorEnum>;
  readonly Total_Weight_Lifted: InputMaybe<FieldSelectorEnum>;
  readonly Total_Work: InputMaybe<FieldSelectorEnum>;
  readonly Type: InputMaybe<FieldSelectorEnum>;
  readonly UV_Index: InputMaybe<FieldSelectorEnum>;
  readonly Uphill_Time: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Condition: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Observation_Time: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Ozone: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Pressure: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Temperature: InputMaybe<FieldSelectorEnum>;
  readonly Weather_Visibility: InputMaybe<FieldSelectorEnum>;
  readonly Weighted_Average_Power: InputMaybe<FieldSelectorEnum>;
  readonly Wind_Bearing: InputMaybe<FieldSelectorEnum>;
  readonly Wind_Gust: InputMaybe<FieldSelectorEnum>;
  readonly Wind_Speed: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ActivitiesCsvFilterInput = {
  readonly Activity_Count: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Date: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Description: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Gear: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_ID: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Name: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Private_Note: InputMaybe<StringQueryOperatorInput>;
  readonly Activity_Type: InputMaybe<StringQueryOperatorInput>;
  readonly Apparent_Temperature: InputMaybe<StringQueryOperatorInput>;
  readonly Athlete_Weight: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Cadence: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Elapsed_Speed: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Flow: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Grade: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Heart_Rate: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Negative_Grade: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Positive_Grade: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Speed: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Temperature: InputMaybe<StringQueryOperatorInput>;
  readonly Average_Watts: InputMaybe<StringQueryOperatorInput>;
  readonly Bike: InputMaybe<StringQueryOperatorInput>;
  readonly Bike_Weight: InputMaybe<StringQueryOperatorInput>;
  readonly Calories: InputMaybe<StringQueryOperatorInput>;
  readonly Cloud_Cover: InputMaybe<StringQueryOperatorInput>;
  readonly Commute: InputMaybe<StringQueryOperatorInput>;
  readonly Dewpoint: InputMaybe<StringQueryOperatorInput>;
  readonly Dirt_Distance: InputMaybe<StringQueryOperatorInput>;
  readonly Distance: InputMaybe<StringQueryOperatorInput>;
  readonly Downhill_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Elapsed_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Elevation_Gain: InputMaybe<StringQueryOperatorInput>;
  readonly Elevation_High: InputMaybe<StringQueryOperatorInput>;
  readonly Elevation_Loss: InputMaybe<StringQueryOperatorInput>;
  readonly Elevation_Low: InputMaybe<StringQueryOperatorInput>;
  readonly Filename: InputMaybe<StringQueryOperatorInput>;
  readonly Flagged: InputMaybe<StringQueryOperatorInput>;
  readonly From_Upload: InputMaybe<StringQueryOperatorInput>;
  readonly Gear: InputMaybe<StringQueryOperatorInput>;
  readonly Grade_Adjusted_Distance: InputMaybe<StringQueryOperatorInput>;
  readonly Humidity: InputMaybe<StringQueryOperatorInput>;
  readonly Jump_Count: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Cadence: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Grade: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Heart_Rate: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Speed: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Temperature: InputMaybe<StringQueryOperatorInput>;
  readonly Max_Watts: InputMaybe<StringQueryOperatorInput>;
  readonly Media: InputMaybe<StringQueryOperatorInput>;
  readonly Moon_Phase: InputMaybe<StringQueryOperatorInput>;
  readonly Moving_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Newly_Explored_Dirt_Distance: InputMaybe<StringQueryOperatorInput>;
  readonly Newly_Explored_Distance: InputMaybe<StringQueryOperatorInput>;
  readonly Number_of_Runs: InputMaybe<StringQueryOperatorInput>;
  readonly Other_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Perceived_Exertion: InputMaybe<StringQueryOperatorInput>;
  readonly Perceived_Relative_Effort: InputMaybe<StringQueryOperatorInput>;
  readonly Power_Count: InputMaybe<StringQueryOperatorInput>;
  readonly Precipitation_Intensity: InputMaybe<StringQueryOperatorInput>;
  readonly Precipitation_Probability: InputMaybe<StringQueryOperatorInput>;
  readonly Precipitation_Type: InputMaybe<StringQueryOperatorInput>;
  readonly Prefer_Perceived_Exertion: InputMaybe<StringQueryOperatorInput>;
  readonly Relative_Effort: InputMaybe<StringQueryOperatorInput>;
  readonly Start_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Sunrise_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Sunset_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Total_Grit: InputMaybe<StringQueryOperatorInput>;
  readonly Total_Steps: InputMaybe<StringQueryOperatorInput>;
  readonly Total_Weight_Lifted: InputMaybe<StringQueryOperatorInput>;
  readonly Total_Work: InputMaybe<StringQueryOperatorInput>;
  readonly Type: InputMaybe<StringQueryOperatorInput>;
  readonly UV_Index: InputMaybe<StringQueryOperatorInput>;
  readonly Uphill_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Condition: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Observation_Time: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Ozone: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Pressure: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Temperature: InputMaybe<StringQueryOperatorInput>;
  readonly Weather_Visibility: InputMaybe<StringQueryOperatorInput>;
  readonly Weighted_Average_Power: InputMaybe<StringQueryOperatorInput>;
  readonly Wind_Bearing: InputMaybe<StringQueryOperatorInput>;
  readonly Wind_Gust: InputMaybe<StringQueryOperatorInput>;
  readonly Wind_Speed: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ActivitiesCsvFilterListInput = {
  readonly elemMatch: InputMaybe<ActivitiesCsvFilterInput>;
};

type ActivitiesCsvGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ActivitiesCsvEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ActivitiesCsvGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ActivitiesCsv>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ActivitiesCsvGroupConnection_distinctArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvGroupConnection_groupArgs = {
  field: ActivitiesCsvFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ActivitiesCsvGroupConnection_maxArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvGroupConnection_minArgs = {
  field: ActivitiesCsvFieldSelector;
};


type ActivitiesCsvGroupConnection_sumArgs = {
  field: ActivitiesCsvFieldSelector;
};

type ActivitiesCsvSortInput = {
  readonly Activity_Count: InputMaybe<SortOrderEnum>;
  readonly Activity_Date: InputMaybe<SortOrderEnum>;
  readonly Activity_Description: InputMaybe<SortOrderEnum>;
  readonly Activity_Gear: InputMaybe<SortOrderEnum>;
  readonly Activity_ID: InputMaybe<SortOrderEnum>;
  readonly Activity_Name: InputMaybe<SortOrderEnum>;
  readonly Activity_Private_Note: InputMaybe<SortOrderEnum>;
  readonly Activity_Type: InputMaybe<SortOrderEnum>;
  readonly Apparent_Temperature: InputMaybe<SortOrderEnum>;
  readonly Athlete_Weight: InputMaybe<SortOrderEnum>;
  readonly Average_Cadence: InputMaybe<SortOrderEnum>;
  readonly Average_Elapsed_Speed: InputMaybe<SortOrderEnum>;
  readonly Average_Flow: InputMaybe<SortOrderEnum>;
  readonly Average_Grade: InputMaybe<SortOrderEnum>;
  readonly Average_Heart_Rate: InputMaybe<SortOrderEnum>;
  readonly Average_Negative_Grade: InputMaybe<SortOrderEnum>;
  readonly Average_Positive_Grade: InputMaybe<SortOrderEnum>;
  readonly Average_Speed: InputMaybe<SortOrderEnum>;
  readonly Average_Temperature: InputMaybe<SortOrderEnum>;
  readonly Average_Watts: InputMaybe<SortOrderEnum>;
  readonly Bike: InputMaybe<SortOrderEnum>;
  readonly Bike_Weight: InputMaybe<SortOrderEnum>;
  readonly Calories: InputMaybe<SortOrderEnum>;
  readonly Cloud_Cover: InputMaybe<SortOrderEnum>;
  readonly Commute: InputMaybe<SortOrderEnum>;
  readonly Dewpoint: InputMaybe<SortOrderEnum>;
  readonly Dirt_Distance: InputMaybe<SortOrderEnum>;
  readonly Distance: InputMaybe<SortOrderEnum>;
  readonly Downhill_Time: InputMaybe<SortOrderEnum>;
  readonly Elapsed_Time: InputMaybe<SortOrderEnum>;
  readonly Elevation_Gain: InputMaybe<SortOrderEnum>;
  readonly Elevation_High: InputMaybe<SortOrderEnum>;
  readonly Elevation_Loss: InputMaybe<SortOrderEnum>;
  readonly Elevation_Low: InputMaybe<SortOrderEnum>;
  readonly Filename: InputMaybe<SortOrderEnum>;
  readonly Flagged: InputMaybe<SortOrderEnum>;
  readonly From_Upload: InputMaybe<SortOrderEnum>;
  readonly Gear: InputMaybe<SortOrderEnum>;
  readonly Grade_Adjusted_Distance: InputMaybe<SortOrderEnum>;
  readonly Humidity: InputMaybe<SortOrderEnum>;
  readonly Jump_Count: InputMaybe<SortOrderEnum>;
  readonly Max_Cadence: InputMaybe<SortOrderEnum>;
  readonly Max_Grade: InputMaybe<SortOrderEnum>;
  readonly Max_Heart_Rate: InputMaybe<SortOrderEnum>;
  readonly Max_Speed: InputMaybe<SortOrderEnum>;
  readonly Max_Temperature: InputMaybe<SortOrderEnum>;
  readonly Max_Watts: InputMaybe<SortOrderEnum>;
  readonly Media: InputMaybe<SortOrderEnum>;
  readonly Moon_Phase: InputMaybe<SortOrderEnum>;
  readonly Moving_Time: InputMaybe<SortOrderEnum>;
  readonly Newly_Explored_Dirt_Distance: InputMaybe<SortOrderEnum>;
  readonly Newly_Explored_Distance: InputMaybe<SortOrderEnum>;
  readonly Number_of_Runs: InputMaybe<SortOrderEnum>;
  readonly Other_Time: InputMaybe<SortOrderEnum>;
  readonly Perceived_Exertion: InputMaybe<SortOrderEnum>;
  readonly Perceived_Relative_Effort: InputMaybe<SortOrderEnum>;
  readonly Power_Count: InputMaybe<SortOrderEnum>;
  readonly Precipitation_Intensity: InputMaybe<SortOrderEnum>;
  readonly Precipitation_Probability: InputMaybe<SortOrderEnum>;
  readonly Precipitation_Type: InputMaybe<SortOrderEnum>;
  readonly Prefer_Perceived_Exertion: InputMaybe<SortOrderEnum>;
  readonly Relative_Effort: InputMaybe<SortOrderEnum>;
  readonly Start_Time: InputMaybe<SortOrderEnum>;
  readonly Sunrise_Time: InputMaybe<SortOrderEnum>;
  readonly Sunset_Time: InputMaybe<SortOrderEnum>;
  readonly Total_Grit: InputMaybe<SortOrderEnum>;
  readonly Total_Steps: InputMaybe<SortOrderEnum>;
  readonly Total_Weight_Lifted: InputMaybe<SortOrderEnum>;
  readonly Total_Work: InputMaybe<SortOrderEnum>;
  readonly Type: InputMaybe<SortOrderEnum>;
  readonly UV_Index: InputMaybe<SortOrderEnum>;
  readonly Uphill_Time: InputMaybe<SortOrderEnum>;
  readonly Weather_Condition: InputMaybe<SortOrderEnum>;
  readonly Weather_Observation_Time: InputMaybe<SortOrderEnum>;
  readonly Weather_Ozone: InputMaybe<SortOrderEnum>;
  readonly Weather_Pressure: InputMaybe<SortOrderEnum>;
  readonly Weather_Temperature: InputMaybe<SortOrderEnum>;
  readonly Weather_Visibility: InputMaybe<SortOrderEnum>;
  readonly Weighted_Average_Power: InputMaybe<SortOrderEnum>;
  readonly Wind_Bearing: InputMaybe<SortOrderEnum>;
  readonly Wind_Gust: InputMaybe<SortOrderEnum>;
  readonly Wind_Speed: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ActivitiesCsv or null if there are no children of given type on this node */
  readonly childActivitiesCsv: Maybe<ActivitiesCsv>;
  /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
  readonly childMdx: Maybe<Mdx>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ActivitiesCsv */
  readonly childrenActivitiesCsv: Maybe<ReadonlyArray<Maybe<ActivitiesCsv>>>;
  /** Returns all children nodes filtered by type Mdx */
  readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childActivitiesCsv: InputMaybe<ActivitiesCsvFieldSelector>;
  readonly childMdx: InputMaybe<MdxFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenActivitiesCsv: InputMaybe<ActivitiesCsvFieldSelector>;
  readonly childrenMdx: InputMaybe<MdxFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childActivitiesCsv: InputMaybe<ActivitiesCsvFilterInput>;
  readonly childMdx: InputMaybe<MdxFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenActivitiesCsv: InputMaybe<ActivitiesCsvFilterListInput>;
  readonly childrenMdx: InputMaybe<MdxFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childActivitiesCsv: InputMaybe<ActivitiesCsvSortInput>;
  readonly childMdx: InputMaybe<MdxSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenActivitiesCsv: InputMaybe<ActivitiesCsvSortInput>;
  readonly childrenMdx: InputMaybe<MdxSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FlickrPhoto = Node & {
  readonly accuracy: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly context: Maybe<Scalars['Int']>;
  readonly datetaken: Maybe<Scalars['Date']>;
  readonly dateupload: Maybe<Scalars['String']>;
  readonly dateupload_date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly farm: Maybe<Scalars['Int']>;
  readonly geo_is_contact: Maybe<Scalars['Int']>;
  readonly geo_is_family: Maybe<Scalars['Int']>;
  readonly geo_is_friend: Maybe<Scalars['Int']>;
  readonly geo_is_public: Maybe<Scalars['Int']>;
  readonly height_c: Maybe<Scalars['Int']>;
  readonly height_l: Maybe<Scalars['Int']>;
  readonly height_m: Maybe<Scalars['Int']>;
  readonly height_n: Maybe<Scalars['Int']>;
  readonly height_o: Maybe<Scalars['Int']>;
  readonly height_q: Maybe<Scalars['Int']>;
  readonly height_s: Maybe<Scalars['Int']>;
  readonly height_sq: Maybe<Scalars['Int']>;
  readonly height_t: Maybe<Scalars['Int']>;
  readonly height_z: Maybe<Scalars['Int']>;
  readonly iconfarm: Maybe<Scalars['Int']>;
  readonly iconserver: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly isfamily: Maybe<Scalars['Int']>;
  readonly isfriend: Maybe<Scalars['Int']>;
  readonly ispublic: Maybe<Scalars['Int']>;
  readonly lastupdate: Maybe<Scalars['String']>;
  readonly lastupdate_date: Maybe<Scalars['Date']>;
  readonly latitude: Maybe<Scalars['String']>;
  readonly license: Maybe<Scalars['String']>;
  readonly longitude: Maybe<Scalars['String']>;
  readonly machine_tags: Maybe<Scalars['String']>;
  readonly media: Maybe<Scalars['String']>;
  readonly media_status: Maybe<Scalars['String']>;
  readonly originalformat: Maybe<Scalars['String']>;
  readonly originalsecret: Maybe<Scalars['String']>;
  readonly owner: Maybe<Scalars['String']>;
  readonly ownername: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly photo_id: Maybe<Scalars['String']>;
  readonly place_id: Maybe<Scalars['String']>;
  readonly secret: Maybe<Scalars['String']>;
  readonly server: Maybe<Scalars['String']>;
  readonly tags: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly url_c: Maybe<Scalars['String']>;
  readonly url_l: Maybe<Scalars['String']>;
  readonly url_m: Maybe<Scalars['String']>;
  readonly url_n: Maybe<Scalars['String']>;
  readonly url_o: Maybe<Scalars['String']>;
  readonly url_q: Maybe<Scalars['String']>;
  readonly url_s: Maybe<Scalars['String']>;
  readonly url_sq: Maybe<Scalars['String']>;
  readonly url_t: Maybe<Scalars['String']>;
  readonly url_z: Maybe<Scalars['String']>;
  readonly views: Maybe<Scalars['String']>;
  readonly width_c: Maybe<Scalars['Int']>;
  readonly width_l: Maybe<Scalars['Int']>;
  readonly width_m: Maybe<Scalars['Int']>;
  readonly width_n: Maybe<Scalars['Int']>;
  readonly width_o: Maybe<Scalars['Int']>;
  readonly width_q: Maybe<Scalars['Int']>;
  readonly width_s: Maybe<Scalars['Int']>;
  readonly width_sq: Maybe<Scalars['Int']>;
  readonly width_t: Maybe<Scalars['Int']>;
  readonly width_z: Maybe<Scalars['Int']>;
  readonly woeid: Maybe<Scalars['String']>;
};


type FlickrPhoto_datetakenArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type FlickrPhoto_dateupload_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type FlickrPhoto_lastupdate_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FlickrPhotoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FlickrPhotoEdge>;
  readonly group: ReadonlyArray<FlickrPhotoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<FlickrPhoto>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FlickrPhotoConnection_distinctArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoConnection_groupArgs = {
  field: FlickrPhotoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FlickrPhotoConnection_maxArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoConnection_minArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoConnection_sumArgs = {
  field: FlickrPhotoFieldSelector;
};

type FlickrPhotoEdge = {
  readonly next: Maybe<FlickrPhoto>;
  readonly node: FlickrPhoto;
  readonly previous: Maybe<FlickrPhoto>;
};

type FlickrPhotoFieldSelector = {
  readonly accuracy: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly context: InputMaybe<FieldSelectorEnum>;
  readonly datetaken: InputMaybe<FieldSelectorEnum>;
  readonly dateupload: InputMaybe<FieldSelectorEnum>;
  readonly dateupload_date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly farm: InputMaybe<FieldSelectorEnum>;
  readonly geo_is_contact: InputMaybe<FieldSelectorEnum>;
  readonly geo_is_family: InputMaybe<FieldSelectorEnum>;
  readonly geo_is_friend: InputMaybe<FieldSelectorEnum>;
  readonly geo_is_public: InputMaybe<FieldSelectorEnum>;
  readonly height_c: InputMaybe<FieldSelectorEnum>;
  readonly height_l: InputMaybe<FieldSelectorEnum>;
  readonly height_m: InputMaybe<FieldSelectorEnum>;
  readonly height_n: InputMaybe<FieldSelectorEnum>;
  readonly height_o: InputMaybe<FieldSelectorEnum>;
  readonly height_q: InputMaybe<FieldSelectorEnum>;
  readonly height_s: InputMaybe<FieldSelectorEnum>;
  readonly height_sq: InputMaybe<FieldSelectorEnum>;
  readonly height_t: InputMaybe<FieldSelectorEnum>;
  readonly height_z: InputMaybe<FieldSelectorEnum>;
  readonly iconfarm: InputMaybe<FieldSelectorEnum>;
  readonly iconserver: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly isfamily: InputMaybe<FieldSelectorEnum>;
  readonly isfriend: InputMaybe<FieldSelectorEnum>;
  readonly ispublic: InputMaybe<FieldSelectorEnum>;
  readonly lastupdate: InputMaybe<FieldSelectorEnum>;
  readonly lastupdate_date: InputMaybe<FieldSelectorEnum>;
  readonly latitude: InputMaybe<FieldSelectorEnum>;
  readonly license: InputMaybe<FieldSelectorEnum>;
  readonly longitude: InputMaybe<FieldSelectorEnum>;
  readonly machine_tags: InputMaybe<FieldSelectorEnum>;
  readonly media: InputMaybe<FieldSelectorEnum>;
  readonly media_status: InputMaybe<FieldSelectorEnum>;
  readonly originalformat: InputMaybe<FieldSelectorEnum>;
  readonly originalsecret: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly ownername: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly photo_id: InputMaybe<FieldSelectorEnum>;
  readonly place_id: InputMaybe<FieldSelectorEnum>;
  readonly secret: InputMaybe<FieldSelectorEnum>;
  readonly server: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url_c: InputMaybe<FieldSelectorEnum>;
  readonly url_l: InputMaybe<FieldSelectorEnum>;
  readonly url_m: InputMaybe<FieldSelectorEnum>;
  readonly url_n: InputMaybe<FieldSelectorEnum>;
  readonly url_o: InputMaybe<FieldSelectorEnum>;
  readonly url_q: InputMaybe<FieldSelectorEnum>;
  readonly url_s: InputMaybe<FieldSelectorEnum>;
  readonly url_sq: InputMaybe<FieldSelectorEnum>;
  readonly url_t: InputMaybe<FieldSelectorEnum>;
  readonly url_z: InputMaybe<FieldSelectorEnum>;
  readonly views: InputMaybe<FieldSelectorEnum>;
  readonly width_c: InputMaybe<FieldSelectorEnum>;
  readonly width_l: InputMaybe<FieldSelectorEnum>;
  readonly width_m: InputMaybe<FieldSelectorEnum>;
  readonly width_n: InputMaybe<FieldSelectorEnum>;
  readonly width_o: InputMaybe<FieldSelectorEnum>;
  readonly width_q: InputMaybe<FieldSelectorEnum>;
  readonly width_s: InputMaybe<FieldSelectorEnum>;
  readonly width_sq: InputMaybe<FieldSelectorEnum>;
  readonly width_t: InputMaybe<FieldSelectorEnum>;
  readonly width_z: InputMaybe<FieldSelectorEnum>;
  readonly woeid: InputMaybe<FieldSelectorEnum>;
};

type FlickrPhotoFilterInput = {
  readonly accuracy: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly context: InputMaybe<IntQueryOperatorInput>;
  readonly datetaken: InputMaybe<DateQueryOperatorInput>;
  readonly dateupload: InputMaybe<StringQueryOperatorInput>;
  readonly dateupload_date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly farm: InputMaybe<IntQueryOperatorInput>;
  readonly geo_is_contact: InputMaybe<IntQueryOperatorInput>;
  readonly geo_is_family: InputMaybe<IntQueryOperatorInput>;
  readonly geo_is_friend: InputMaybe<IntQueryOperatorInput>;
  readonly geo_is_public: InputMaybe<IntQueryOperatorInput>;
  readonly height_c: InputMaybe<IntQueryOperatorInput>;
  readonly height_l: InputMaybe<IntQueryOperatorInput>;
  readonly height_m: InputMaybe<IntQueryOperatorInput>;
  readonly height_n: InputMaybe<IntQueryOperatorInput>;
  readonly height_o: InputMaybe<IntQueryOperatorInput>;
  readonly height_q: InputMaybe<IntQueryOperatorInput>;
  readonly height_s: InputMaybe<IntQueryOperatorInput>;
  readonly height_sq: InputMaybe<IntQueryOperatorInput>;
  readonly height_t: InputMaybe<IntQueryOperatorInput>;
  readonly height_z: InputMaybe<IntQueryOperatorInput>;
  readonly iconfarm: InputMaybe<IntQueryOperatorInput>;
  readonly iconserver: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isfamily: InputMaybe<IntQueryOperatorInput>;
  readonly isfriend: InputMaybe<IntQueryOperatorInput>;
  readonly ispublic: InputMaybe<IntQueryOperatorInput>;
  readonly lastupdate: InputMaybe<StringQueryOperatorInput>;
  readonly lastupdate_date: InputMaybe<DateQueryOperatorInput>;
  readonly latitude: InputMaybe<StringQueryOperatorInput>;
  readonly license: InputMaybe<StringQueryOperatorInput>;
  readonly longitude: InputMaybe<StringQueryOperatorInput>;
  readonly machine_tags: InputMaybe<StringQueryOperatorInput>;
  readonly media: InputMaybe<StringQueryOperatorInput>;
  readonly media_status: InputMaybe<StringQueryOperatorInput>;
  readonly originalformat: InputMaybe<StringQueryOperatorInput>;
  readonly originalsecret: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly ownername: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly photo_id: InputMaybe<StringQueryOperatorInput>;
  readonly place_id: InputMaybe<StringQueryOperatorInput>;
  readonly secret: InputMaybe<StringQueryOperatorInput>;
  readonly server: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url_c: InputMaybe<StringQueryOperatorInput>;
  readonly url_l: InputMaybe<StringQueryOperatorInput>;
  readonly url_m: InputMaybe<StringQueryOperatorInput>;
  readonly url_n: InputMaybe<StringQueryOperatorInput>;
  readonly url_o: InputMaybe<StringQueryOperatorInput>;
  readonly url_q: InputMaybe<StringQueryOperatorInput>;
  readonly url_s: InputMaybe<StringQueryOperatorInput>;
  readonly url_sq: InputMaybe<StringQueryOperatorInput>;
  readonly url_t: InputMaybe<StringQueryOperatorInput>;
  readonly url_z: InputMaybe<StringQueryOperatorInput>;
  readonly views: InputMaybe<StringQueryOperatorInput>;
  readonly width_c: InputMaybe<IntQueryOperatorInput>;
  readonly width_l: InputMaybe<IntQueryOperatorInput>;
  readonly width_m: InputMaybe<IntQueryOperatorInput>;
  readonly width_n: InputMaybe<IntQueryOperatorInput>;
  readonly width_o: InputMaybe<IntQueryOperatorInput>;
  readonly width_q: InputMaybe<IntQueryOperatorInput>;
  readonly width_s: InputMaybe<IntQueryOperatorInput>;
  readonly width_sq: InputMaybe<IntQueryOperatorInput>;
  readonly width_t: InputMaybe<IntQueryOperatorInput>;
  readonly width_z: InputMaybe<IntQueryOperatorInput>;
  readonly woeid: InputMaybe<StringQueryOperatorInput>;
};

type FlickrPhotoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FlickrPhotoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FlickrPhotoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<FlickrPhoto>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FlickrPhotoGroupConnection_distinctArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoGroupConnection_groupArgs = {
  field: FlickrPhotoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FlickrPhotoGroupConnection_maxArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoGroupConnection_minArgs = {
  field: FlickrPhotoFieldSelector;
};


type FlickrPhotoGroupConnection_sumArgs = {
  field: FlickrPhotoFieldSelector;
};

type FlickrPhotoSortInput = {
  readonly accuracy: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly context: InputMaybe<SortOrderEnum>;
  readonly datetaken: InputMaybe<SortOrderEnum>;
  readonly dateupload: InputMaybe<SortOrderEnum>;
  readonly dateupload_date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly farm: InputMaybe<SortOrderEnum>;
  readonly geo_is_contact: InputMaybe<SortOrderEnum>;
  readonly geo_is_family: InputMaybe<SortOrderEnum>;
  readonly geo_is_friend: InputMaybe<SortOrderEnum>;
  readonly geo_is_public: InputMaybe<SortOrderEnum>;
  readonly height_c: InputMaybe<SortOrderEnum>;
  readonly height_l: InputMaybe<SortOrderEnum>;
  readonly height_m: InputMaybe<SortOrderEnum>;
  readonly height_n: InputMaybe<SortOrderEnum>;
  readonly height_o: InputMaybe<SortOrderEnum>;
  readonly height_q: InputMaybe<SortOrderEnum>;
  readonly height_s: InputMaybe<SortOrderEnum>;
  readonly height_sq: InputMaybe<SortOrderEnum>;
  readonly height_t: InputMaybe<SortOrderEnum>;
  readonly height_z: InputMaybe<SortOrderEnum>;
  readonly iconfarm: InputMaybe<SortOrderEnum>;
  readonly iconserver: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly isfamily: InputMaybe<SortOrderEnum>;
  readonly isfriend: InputMaybe<SortOrderEnum>;
  readonly ispublic: InputMaybe<SortOrderEnum>;
  readonly lastupdate: InputMaybe<SortOrderEnum>;
  readonly lastupdate_date: InputMaybe<SortOrderEnum>;
  readonly latitude: InputMaybe<SortOrderEnum>;
  readonly license: InputMaybe<SortOrderEnum>;
  readonly longitude: InputMaybe<SortOrderEnum>;
  readonly machine_tags: InputMaybe<SortOrderEnum>;
  readonly media: InputMaybe<SortOrderEnum>;
  readonly media_status: InputMaybe<SortOrderEnum>;
  readonly originalformat: InputMaybe<SortOrderEnum>;
  readonly originalsecret: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly ownername: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly photo_id: InputMaybe<SortOrderEnum>;
  readonly place_id: InputMaybe<SortOrderEnum>;
  readonly secret: InputMaybe<SortOrderEnum>;
  readonly server: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url_c: InputMaybe<SortOrderEnum>;
  readonly url_l: InputMaybe<SortOrderEnum>;
  readonly url_m: InputMaybe<SortOrderEnum>;
  readonly url_n: InputMaybe<SortOrderEnum>;
  readonly url_o: InputMaybe<SortOrderEnum>;
  readonly url_q: InputMaybe<SortOrderEnum>;
  readonly url_s: InputMaybe<SortOrderEnum>;
  readonly url_sq: InputMaybe<SortOrderEnum>;
  readonly url_t: InputMaybe<SortOrderEnum>;
  readonly url_z: InputMaybe<SortOrderEnum>;
  readonly views: InputMaybe<SortOrderEnum>;
  readonly width_c: InputMaybe<SortOrderEnum>;
  readonly width_l: InputMaybe<SortOrderEnum>;
  readonly width_m: InputMaybe<SortOrderEnum>;
  readonly width_n: InputMaybe<SortOrderEnum>;
  readonly width_o: InputMaybe<SortOrderEnum>;
  readonly width_q: InputMaybe<SortOrderEnum>;
  readonly width_s: InputMaybe<SortOrderEnum>;
  readonly width_sq: InputMaybe<SortOrderEnum>;
  readonly width_t: InputMaybe<SortOrderEnum>;
  readonly width_z: InputMaybe<SortOrderEnum>;
  readonly woeid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Mdx = Node & {
  readonly body: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type MdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFilterInput>;
};

type MdxFrontmatter = {
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type MdxFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterFieldSelector = {
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterFilterInput = {
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterSortInput = {
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MdxFrontmatterSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Query = {
  readonly activitiesCsv: Maybe<ActivitiesCsv>;
  readonly allActivitiesCsv: ActivitiesCsvConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allFlickrPhoto: FlickrPhotoConnection;
  readonly allMdx: MdxConnection;
  readonly allRides: RidesConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly flickrPhoto: Maybe<FlickrPhoto>;
  readonly mdx: Maybe<Mdx>;
  readonly rides: Maybe<Rides>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_activitiesCsvArgs = {
  Activity_Count: InputMaybe<StringQueryOperatorInput>;
  Activity_Date: InputMaybe<StringQueryOperatorInput>;
  Activity_Description: InputMaybe<StringQueryOperatorInput>;
  Activity_Gear: InputMaybe<StringQueryOperatorInput>;
  Activity_ID: InputMaybe<StringQueryOperatorInput>;
  Activity_Name: InputMaybe<StringQueryOperatorInput>;
  Activity_Private_Note: InputMaybe<StringQueryOperatorInput>;
  Activity_Type: InputMaybe<StringQueryOperatorInput>;
  Apparent_Temperature: InputMaybe<StringQueryOperatorInput>;
  Athlete_Weight: InputMaybe<StringQueryOperatorInput>;
  Average_Cadence: InputMaybe<StringQueryOperatorInput>;
  Average_Elapsed_Speed: InputMaybe<StringQueryOperatorInput>;
  Average_Flow: InputMaybe<StringQueryOperatorInput>;
  Average_Grade: InputMaybe<StringQueryOperatorInput>;
  Average_Heart_Rate: InputMaybe<StringQueryOperatorInput>;
  Average_Negative_Grade: InputMaybe<StringQueryOperatorInput>;
  Average_Positive_Grade: InputMaybe<StringQueryOperatorInput>;
  Average_Speed: InputMaybe<StringQueryOperatorInput>;
  Average_Temperature: InputMaybe<StringQueryOperatorInput>;
  Average_Watts: InputMaybe<StringQueryOperatorInput>;
  Bike: InputMaybe<StringQueryOperatorInput>;
  Bike_Weight: InputMaybe<StringQueryOperatorInput>;
  Calories: InputMaybe<StringQueryOperatorInput>;
  Cloud_Cover: InputMaybe<StringQueryOperatorInput>;
  Commute: InputMaybe<StringQueryOperatorInput>;
  Dewpoint: InputMaybe<StringQueryOperatorInput>;
  Dirt_Distance: InputMaybe<StringQueryOperatorInput>;
  Distance: InputMaybe<StringQueryOperatorInput>;
  Downhill_Time: InputMaybe<StringQueryOperatorInput>;
  Elapsed_Time: InputMaybe<StringQueryOperatorInput>;
  Elevation_Gain: InputMaybe<StringQueryOperatorInput>;
  Elevation_High: InputMaybe<StringQueryOperatorInput>;
  Elevation_Loss: InputMaybe<StringQueryOperatorInput>;
  Elevation_Low: InputMaybe<StringQueryOperatorInput>;
  Filename: InputMaybe<StringQueryOperatorInput>;
  Flagged: InputMaybe<StringQueryOperatorInput>;
  From_Upload: InputMaybe<StringQueryOperatorInput>;
  Gear: InputMaybe<StringQueryOperatorInput>;
  Grade_Adjusted_Distance: InputMaybe<StringQueryOperatorInput>;
  Humidity: InputMaybe<StringQueryOperatorInput>;
  Jump_Count: InputMaybe<StringQueryOperatorInput>;
  Max_Cadence: InputMaybe<StringQueryOperatorInput>;
  Max_Grade: InputMaybe<StringQueryOperatorInput>;
  Max_Heart_Rate: InputMaybe<StringQueryOperatorInput>;
  Max_Speed: InputMaybe<StringQueryOperatorInput>;
  Max_Temperature: InputMaybe<StringQueryOperatorInput>;
  Max_Watts: InputMaybe<StringQueryOperatorInput>;
  Media: InputMaybe<StringQueryOperatorInput>;
  Moon_Phase: InputMaybe<StringQueryOperatorInput>;
  Moving_Time: InputMaybe<StringQueryOperatorInput>;
  Newly_Explored_Dirt_Distance: InputMaybe<StringQueryOperatorInput>;
  Newly_Explored_Distance: InputMaybe<StringQueryOperatorInput>;
  Number_of_Runs: InputMaybe<StringQueryOperatorInput>;
  Other_Time: InputMaybe<StringQueryOperatorInput>;
  Perceived_Exertion: InputMaybe<StringQueryOperatorInput>;
  Perceived_Relative_Effort: InputMaybe<StringQueryOperatorInput>;
  Power_Count: InputMaybe<StringQueryOperatorInput>;
  Precipitation_Intensity: InputMaybe<StringQueryOperatorInput>;
  Precipitation_Probability: InputMaybe<StringQueryOperatorInput>;
  Precipitation_Type: InputMaybe<StringQueryOperatorInput>;
  Prefer_Perceived_Exertion: InputMaybe<StringQueryOperatorInput>;
  Relative_Effort: InputMaybe<StringQueryOperatorInput>;
  Start_Time: InputMaybe<StringQueryOperatorInput>;
  Sunrise_Time: InputMaybe<StringQueryOperatorInput>;
  Sunset_Time: InputMaybe<StringQueryOperatorInput>;
  Total_Grit: InputMaybe<StringQueryOperatorInput>;
  Total_Steps: InputMaybe<StringQueryOperatorInput>;
  Total_Weight_Lifted: InputMaybe<StringQueryOperatorInput>;
  Total_Work: InputMaybe<StringQueryOperatorInput>;
  Type: InputMaybe<StringQueryOperatorInput>;
  UV_Index: InputMaybe<StringQueryOperatorInput>;
  Uphill_Time: InputMaybe<StringQueryOperatorInput>;
  Weather_Condition: InputMaybe<StringQueryOperatorInput>;
  Weather_Observation_Time: InputMaybe<StringQueryOperatorInput>;
  Weather_Ozone: InputMaybe<StringQueryOperatorInput>;
  Weather_Pressure: InputMaybe<StringQueryOperatorInput>;
  Weather_Temperature: InputMaybe<StringQueryOperatorInput>;
  Weather_Visibility: InputMaybe<StringQueryOperatorInput>;
  Weighted_Average_Power: InputMaybe<StringQueryOperatorInput>;
  Wind_Bearing: InputMaybe<StringQueryOperatorInput>;
  Wind_Gust: InputMaybe<StringQueryOperatorInput>;
  Wind_Speed: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_allActivitiesCsvArgs = {
  filter: InputMaybe<ActivitiesCsvFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ActivitiesCsvSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allFlickrPhotoArgs = {
  filter: InputMaybe<FlickrPhotoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FlickrPhotoSortInput>>>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MdxSortInput>>>;
};


type Query_allRidesArgs = {
  filter: InputMaybe<RidesFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<RidesSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childActivitiesCsv: InputMaybe<ActivitiesCsvFilterInput>;
  childMdx: InputMaybe<MdxFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenActivitiesCsv: InputMaybe<ActivitiesCsvFilterListInput>;
  childrenMdx: InputMaybe<MdxFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_flickrPhotoArgs = {
  accuracy: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  context: InputMaybe<IntQueryOperatorInput>;
  datetaken: InputMaybe<DateQueryOperatorInput>;
  dateupload: InputMaybe<StringQueryOperatorInput>;
  dateupload_date: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  farm: InputMaybe<IntQueryOperatorInput>;
  geo_is_contact: InputMaybe<IntQueryOperatorInput>;
  geo_is_family: InputMaybe<IntQueryOperatorInput>;
  geo_is_friend: InputMaybe<IntQueryOperatorInput>;
  geo_is_public: InputMaybe<IntQueryOperatorInput>;
  height_c: InputMaybe<IntQueryOperatorInput>;
  height_l: InputMaybe<IntQueryOperatorInput>;
  height_m: InputMaybe<IntQueryOperatorInput>;
  height_n: InputMaybe<IntQueryOperatorInput>;
  height_o: InputMaybe<IntQueryOperatorInput>;
  height_q: InputMaybe<IntQueryOperatorInput>;
  height_s: InputMaybe<IntQueryOperatorInput>;
  height_sq: InputMaybe<IntQueryOperatorInput>;
  height_t: InputMaybe<IntQueryOperatorInput>;
  height_z: InputMaybe<IntQueryOperatorInput>;
  iconfarm: InputMaybe<IntQueryOperatorInput>;
  iconserver: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isfamily: InputMaybe<IntQueryOperatorInput>;
  isfriend: InputMaybe<IntQueryOperatorInput>;
  ispublic: InputMaybe<IntQueryOperatorInput>;
  lastupdate: InputMaybe<StringQueryOperatorInput>;
  lastupdate_date: InputMaybe<DateQueryOperatorInput>;
  latitude: InputMaybe<StringQueryOperatorInput>;
  license: InputMaybe<StringQueryOperatorInput>;
  longitude: InputMaybe<StringQueryOperatorInput>;
  machine_tags: InputMaybe<StringQueryOperatorInput>;
  media: InputMaybe<StringQueryOperatorInput>;
  media_status: InputMaybe<StringQueryOperatorInput>;
  originalformat: InputMaybe<StringQueryOperatorInput>;
  originalsecret: InputMaybe<StringQueryOperatorInput>;
  owner: InputMaybe<StringQueryOperatorInput>;
  ownername: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  photo_id: InputMaybe<StringQueryOperatorInput>;
  place_id: InputMaybe<StringQueryOperatorInput>;
  secret: InputMaybe<StringQueryOperatorInput>;
  server: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  url_c: InputMaybe<StringQueryOperatorInput>;
  url_l: InputMaybe<StringQueryOperatorInput>;
  url_m: InputMaybe<StringQueryOperatorInput>;
  url_n: InputMaybe<StringQueryOperatorInput>;
  url_o: InputMaybe<StringQueryOperatorInput>;
  url_q: InputMaybe<StringQueryOperatorInput>;
  url_s: InputMaybe<StringQueryOperatorInput>;
  url_sq: InputMaybe<StringQueryOperatorInput>;
  url_t: InputMaybe<StringQueryOperatorInput>;
  url_z: InputMaybe<StringQueryOperatorInput>;
  views: InputMaybe<StringQueryOperatorInput>;
  width_c: InputMaybe<IntQueryOperatorInput>;
  width_l: InputMaybe<IntQueryOperatorInput>;
  width_m: InputMaybe<IntQueryOperatorInput>;
  width_n: InputMaybe<IntQueryOperatorInput>;
  width_o: InputMaybe<IntQueryOperatorInput>;
  width_q: InputMaybe<IntQueryOperatorInput>;
  width_s: InputMaybe<IntQueryOperatorInput>;
  width_sq: InputMaybe<IntQueryOperatorInput>;
  width_t: InputMaybe<IntQueryOperatorInput>;
  width_z: InputMaybe<IntQueryOperatorInput>;
  woeid: InputMaybe<StringQueryOperatorInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_ridesArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  track: InputMaybe<RidesTrackFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Rides = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly track: Maybe<RidesTrack>;
};

type RidesConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RidesEdge>;
  readonly group: ReadonlyArray<RidesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Rides>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RidesConnection_distinctArgs = {
  field: RidesFieldSelector;
};


type RidesConnection_groupArgs = {
  field: RidesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RidesConnection_maxArgs = {
  field: RidesFieldSelector;
};


type RidesConnection_minArgs = {
  field: RidesFieldSelector;
};


type RidesConnection_sumArgs = {
  field: RidesFieldSelector;
};

type RidesEdge = {
  readonly next: Maybe<Rides>;
  readonly node: Rides;
  readonly previous: Maybe<Rides>;
};

type RidesFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly track: InputMaybe<RidesTrackFieldSelector>;
};

type RidesFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly track: InputMaybe<RidesTrackFilterInput>;
};

type RidesGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<RidesEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<RidesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Rides>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type RidesGroupConnection_distinctArgs = {
  field: RidesFieldSelector;
};


type RidesGroupConnection_groupArgs = {
  field: RidesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type RidesGroupConnection_maxArgs = {
  field: RidesFieldSelector;
};


type RidesGroupConnection_minArgs = {
  field: RidesFieldSelector;
};


type RidesGroupConnection_sumArgs = {
  field: RidesFieldSelector;
};

type RidesSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly track: InputMaybe<RidesTrackSortInput>;
};

type RidesTrack = {
  readonly endPoint: Maybe<RidesTrackEndPoint>;
  readonly name: Maybe<Scalars['String']>;
  readonly points: Maybe<ReadonlyArray<Maybe<RidesTrackPoints>>>;
  readonly startingPoint: Maybe<RidesTrackStartingPoint>;
};

type RidesTrackEndPoint = {
  readonly ele: Maybe<Scalars['String']>;
  readonly lat: Maybe<Scalars['String']>;
  readonly lon: Maybe<Scalars['String']>;
};

type RidesTrackEndPointFieldSelector = {
  readonly ele: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lon: InputMaybe<FieldSelectorEnum>;
};

type RidesTrackEndPointFilterInput = {
  readonly ele: InputMaybe<StringQueryOperatorInput>;
  readonly lat: InputMaybe<StringQueryOperatorInput>;
  readonly lon: InputMaybe<StringQueryOperatorInput>;
};

type RidesTrackEndPointSortInput = {
  readonly ele: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lon: InputMaybe<SortOrderEnum>;
};

type RidesTrackFieldSelector = {
  readonly endPoint: InputMaybe<RidesTrackEndPointFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly points: InputMaybe<RidesTrackPointsFieldSelector>;
  readonly startingPoint: InputMaybe<RidesTrackStartingPointFieldSelector>;
};

type RidesTrackFilterInput = {
  readonly endPoint: InputMaybe<RidesTrackEndPointFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly points: InputMaybe<RidesTrackPointsFilterListInput>;
  readonly startingPoint: InputMaybe<RidesTrackStartingPointFilterInput>;
};

type RidesTrackPoints = {
  readonly ele: Maybe<Scalars['String']>;
  readonly lat: Maybe<Scalars['String']>;
  readonly lon: Maybe<Scalars['String']>;
};

type RidesTrackPointsFieldSelector = {
  readonly ele: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lon: InputMaybe<FieldSelectorEnum>;
};

type RidesTrackPointsFilterInput = {
  readonly ele: InputMaybe<StringQueryOperatorInput>;
  readonly lat: InputMaybe<StringQueryOperatorInput>;
  readonly lon: InputMaybe<StringQueryOperatorInput>;
};

type RidesTrackPointsFilterListInput = {
  readonly elemMatch: InputMaybe<RidesTrackPointsFilterInput>;
};

type RidesTrackPointsSortInput = {
  readonly ele: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lon: InputMaybe<SortOrderEnum>;
};

type RidesTrackSortInput = {
  readonly endPoint: InputMaybe<RidesTrackEndPointSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly points: InputMaybe<RidesTrackPointsSortInput>;
  readonly startingPoint: InputMaybe<RidesTrackStartingPointSortInput>;
};

type RidesTrackStartingPoint = {
  readonly ele: Maybe<Scalars['String']>;
  readonly lat: Maybe<Scalars['String']>;
  readonly lon: Maybe<Scalars['String']>;
};

type RidesTrackStartingPointFieldSelector = {
  readonly ele: InputMaybe<FieldSelectorEnum>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lon: InputMaybe<FieldSelectorEnum>;
};

type RidesTrackStartingPointFilterInput = {
  readonly ele: InputMaybe<StringQueryOperatorInput>;
  readonly lat: InputMaybe<StringQueryOperatorInput>;
  readonly lon: InputMaybe<StringQueryOperatorInput>;
};

type RidesTrackStartingPointSortInput = {
  readonly ele: InputMaybe<SortOrderEnum>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lon: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<Scalars['Boolean']>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<FieldSelectorEnum>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SortOrderEnum>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type activitiesQueryQueryVariables = Exact<{ [key: string]: never; }>;


type activitiesQueryQuery = { readonly allActivitiesCsv: { readonly nodes: ReadonlyArray<{ readonly Activity_ID: string | null, readonly Activity_Name: string | null, readonly Activity_Date: string | null, readonly Moving_Time: string | null, readonly Distance: string | null, readonly Average_Speed: string | null, readonly Average_Watts: string | null, readonly Weighted_Average_Power: string | null, readonly Weather_Condition: string | null, readonly Elevation_Gain: string | null, readonly Max_Grade: string | null, readonly Calories: string | null, readonly Average_Temperature: string | null }> } };

type DividePhotoQueryQueryVariables = Exact<{ [key: string]: never; }>;


type DividePhotoQueryQuery = { readonly allFlickrPhoto: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string | null, readonly description: string | null, readonly tags: string | null, readonly datetaken: string | null, readonly url_o: string | null, readonly width_q: number | null, readonly height_q: number | null, readonly url_q: string | null, readonly width_o: number | null, readonly height_o: number | null, readonly media: string | null, readonly media_status: string | null, readonly url_m: string | null, readonly url_c: string | null, readonly url_z: string | null, readonly farm: number | null, readonly server: string | null, readonly secret: string | null, readonly originalsecret: string | null, readonly photo_id: string | null, readonly latitude: string | null, readonly longitude: string | null } }> } };

type FlickrImageFragmentFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string | null, readonly description: string | null, readonly tags: string | null, readonly datetaken: string | null, readonly url_o: string | null, readonly width_q: number | null, readonly height_q: number | null, readonly url_q: string | null, readonly width_o: number | null, readonly height_o: number | null, readonly media: string | null, readonly media_status: string | null, readonly url_m: string | null, readonly url_c: string | null, readonly url_z: string | null, readonly farm: number | null, readonly server: string | null, readonly secret: string | null, readonly originalsecret: string | null, readonly photo_id: string | null, readonly latitude: string | null, readonly longitude: string | null } }> };

type PhotoQueryQueryVariables = Exact<{ [key: string]: never; }>;


type PhotoQueryQuery = { readonly allFlickrPhoto: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly title: string | null, readonly description: string | null, readonly tags: string | null, readonly datetaken: string | null, readonly url_o: string | null, readonly width_q: number | null, readonly height_q: number | null, readonly url_q: string | null, readonly width_o: number | null, readonly height_o: number | null, readonly media: string | null, readonly media_status: string | null, readonly url_m: string | null, readonly url_c: string | null, readonly url_z: string | null, readonly farm: number | null, readonly server: string | null, readonly secret: string | null, readonly originalsecret: string | null, readonly photo_id: string | null, readonly latitude: string | null, readonly longitude: string | null } }> } };

type ridesQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ridesQueryQuery = { readonly allRides: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly track: { readonly name: string | null, readonly endPoint: { readonly lat: string | null, readonly lon: string | null } | null, readonly startingPoint: { readonly lat: string | null, readonly lon: string | null } | null, readonly points: ReadonlyArray<{ readonly lat: string | null, readonly lon: string | null, readonly ele: string | null } | null> | null } | null }> } };

type SiteTitleQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SiteTitleQueryQuery = { readonly allMdx: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly excerpt: string | null, readonly frontmatter: { readonly title: string | null, readonly slug: string | null, readonly type: string | null } | null }> } };


}
